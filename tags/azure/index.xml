<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azure on Craig Forrester</title>
    <link>https://www.craigforrester.com/tags/azure/</link>
    <description>Recent content in Azure on Craig Forrester</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 31 Dec 2018 16:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://www.craigforrester.com/tags/azure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Resize Azure Virtual Machine with Azure PowerShell</title>
      <link>https://www.craigforrester.com/posts/resize-azure-virtual-machine-with-azure-powershell/</link>
      <pubDate>Mon, 31 Dec 2018 16:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/resize-azure-virtual-machine-with-azure-powershell/</guid>
      <description>In several previous posts, I discussed how to resize the virtual hard disks on an Azure virtual machine using Azure CLI and PowerShell. In this post, I&amp;rsquo;m going to walk through how to resize an Azure virtual machine with PowerShell, and cover how to convert these commands into a script.
Log In and Verify Subscription As always, we want to be sure we have PowerShell connected to Azure and that we using the right subscription.</description>
    </item>
    
    <item>
      <title>Resize an Azure VM Windows OS Partition</title>
      <link>https://www.craigforrester.com/posts/resize-an-azure-vm-windows-os-partition/</link>
      <pubDate>Wed, 08 Aug 2018 17:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/resize-an-azure-vm-windows-os-partition/</guid>
      <description>Important
As always, this post is provided &amp;ldquo;as-is&amp;rdquo; without any warranty of any kind, and contains operations which can irrevocably destroy data on your systems. Your systems, storage, and other devices may have configurations or edge cases I have not accounted for here. Take great care and test these commands and any resulting scripts you create in lab/test/development environments to avoid catastrophic data loss.
It is a good idea to perform a full data backup or take a snapshot prior to performing potentially destructive operations.</description>
    </item>
    
    <item>
      <title>Resize Azure Virtual Machine Disks with Azure PowerShell</title>
      <link>https://www.craigforrester.com/posts/resize-azure-vm-disks-with-azure-powershell/</link>
      <pubDate>Wed, 01 Aug 2018 16:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/resize-azure-vm-disks-with-azure-powershell/</guid>
      <description>In this post, I&amp;rsquo;m going to walk through how to expand a managed OS disk on an Azure virtual machine with PowerShell. In the previous post in this series, we covered how to achieve this with Azure CLI in Bash, and in later posts, we will cover how to convert these commands into scripts.
Log In and Verify Subscription Before we do anything, as always, we want to be certain we have PowerShell connected to Azure Resource Manager, and that we are on the correct subscription.</description>
    </item>
    
    <item>
      <title>Resize Azure Virtual Machine Disks with Azure CLI</title>
      <link>https://www.craigforrester.com/posts/resize-azure-vm-disks-with-azure-cli/</link>
      <pubDate>Wed, 25 Jul 2018 18:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/resize-azure-vm-disks-with-azure-cli/</guid>
      <description>In this post, I&amp;rsquo;m going to walk through how to expand a managed OS disk on an Azure virtual machine. In subsequent posts, we will cover how to convert this into a script for use interactively or with automation tools.
Log In and Verify Subscription I always like to include a reminder to validate that you are logged in to the correct Azure Subscription. For those of us with multiple clients and subscriptions to manage, failure to do this can have serious consequences, so I suggest do so every time, and building some kind of verification logic into your automation scripts as well, where it makes sense.</description>
    </item>
    
    <item>
      <title>How to Create an Azure Service Principal with Limited Rights</title>
      <link>https://www.craigforrester.com/posts/how-to-create-an-azure-service-principal-with-limited-rights/</link>
      <pubDate>Wed, 16 May 2018 17:00:00 -0400</pubDate>
      
      <guid>https://www.craigforrester.com/posts/how-to-create-an-azure-service-principal-with-limited-rights/</guid>
      <description>Role-Based Least Privilege In some cases, we have operations teams or developers that need tools or applications to be able access to their Azure virtual machines, but they only need the ability to perform basic operations: starting, stopping, restarting, or deallocating VMs. In this case, we can assign them a service principal for a given role with rights to perform only those operations. This is referred to as &amp;ldquo;role based access control&amp;rdquo; or &amp;ldquo;RBAC&amp;rdquo; and is in keeping with the best practice of least-privilege.</description>
    </item>
    
    <item>
      <title>Azure CLI Basics: Listing Resources</title>
      <link>https://www.craigforrester.com/posts/azure-cli-basics-listing-resources/</link>
      <pubDate>Tue, 08 May 2018 18:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/azure-cli-basics-listing-resources/</guid>
      <description>In this post, we will cover some basic commands to list some resources in Azure.
TL;DR If you just want to see a list of commands covered in this post:
az account list az group list az network vnet list az network vnet subnet list -g $resource_group --vnet-name $vnet az network nsg list -g $resource_group az network nsg rule list -g $resource_group --nsg-name $nsg az network nic list az network nic ip-config list -g $resource_group --nic-name $nic az network public-ip list -g $resource_group az vm list -g $resource_group az vm list -g $resource_group --show-details  Listing Accounts First, as always, verify that you have logged in and that the correct subscription is selected by running az account list:</description>
    </item>
    
    <item>
      <title>Azure CLI Basics: Anatomy of a Command</title>
      <link>https://www.craigforrester.com/posts/azure-cli-basics-anatomy-of-a-command/</link>
      <pubDate>Mon, 23 Apr 2018 18:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/azure-cli-basics-anatomy-of-a-command/</guid>
      <description>In my previous post in this series, I covered how to authenticate Azure CLI to one or more Azure Subscriptions and switch between those subscriptions. In this post, we will cover how Azure CLI command lines are structured.
Before we begin, as always, verify that you have logged in and that the correct subscription is selected by running az account list. The currently selected subscription is the one marked True under IsDefault in the output.</description>
    </item>
    
    <item>
      <title>Azure CLI Basics: Logging In</title>
      <link>https://www.craigforrester.com/posts/azure-cli-basics-logging-in/</link>
      <pubDate>Mon, 26 Feb 2018 18:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/azure-cli-basics-logging-in/</guid>
      <description>In my previous post, I discussed how to configure some basic Azure CLI settings and verify the installation. In this post, we&amp;rsquo;ll cover how to authenticate Azure CLI to one or more Azure Subscriptions and switch between those subscriptions.
TL;DR If you&amp;rsquo;re in a hurry, here is a brief summary of the commands used in this post:
# List currently authenticated subscriptions az account list # Log in to a subscription az login # Display subscriptions by Name and show which is selected az account list --query &amp;quot;[].</description>
    </item>
    
    <item>
      <title>Azure CLI Basics: Initial Configuration</title>
      <link>https://www.craigforrester.com/posts/azure-cli-basics-initial-configuration/</link>
      <pubDate>Thu, 22 Feb 2018 18:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/azure-cli-basics-initial-configuration/</guid>
      <description>In my previous post in this series, I discussed how to install Azure CLI using Python&amp;rsquo;s package manager, pip, and how to use it to keep it updated. In this post, we&amp;rsquo;ll cover how to set some default configuration.
Verifying Azure CLI Installation To start with, it&amp;rsquo;s a good idea to verify the installation works and check the version installed:
PS&amp;gt; az --version azure-cli (2.0.27) acr (2.0.21) acs (2.0.26) advisor (0.</description>
    </item>
    
    <item>
      <title>Install Azure CLI on Windows 10 using Python pip</title>
      <link>https://www.craigforrester.com/posts/install-azure-cli-on-windows-10-using-python-pip/</link>
      <pubDate>Mon, 19 Feb 2018 21:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/install-azure-cli-on-windows-10-using-python-pip/</guid>
      <description>TL;DR If you want to cut to the chase, here&amp;rsquo;s the complete list of commands:
# Download the Python 3.6.4 installer with PowerShell Invoke-WebRequest -Uri &#39;https://www.python.org/ftp/python/3.6.4/python-3.6.4-amd64.exe&#39; -OutFile &#39;.\python-3.6.4-amd64.exe&#39; # Passive Install of Python for All Users # Run this from an elevated PowerShell prompt .\python-3.6.4-amd64.exe /passive TargetDir=&amp;quot;C:\Python&amp;quot; InstallAllUsers=1 PrependPath=1  Run these in a new PowerShell window after installing Python:
# Install Azure CLI system-wide pip install azure-cli # Upgrade Azure CLI later on pip install --upgrade azure-cli  For a fuller explanation, read on&amp;hellip;</description>
    </item>
    
  </channel>
</rss>