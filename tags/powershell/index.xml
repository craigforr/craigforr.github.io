<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Powershell on Craig Forrester</title>
    <link>https://www.craigforrester.com/tags/powershell/</link>
    <description>Recent content in Powershell on Craig Forrester</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 08 Aug 2018 17:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://www.craigforrester.com/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Resize an Azure VM Windows OS Partition</title>
      <link>https://www.craigforrester.com/posts/resize-an-azure-vm-windows-os-partition/</link>
      <pubDate>Wed, 08 Aug 2018 17:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/resize-an-azure-vm-windows-os-partition/</guid>
      <description>Important
As always, this post is provided &amp;ldquo;as-is&amp;rdquo; without any warranty of any kind, and contains operations which can irrevocably destroy data on your systems. Your systems, storage, and other devices may have configurations or edge cases I have not accounted for here. Take great care and test these commands and any resulting scripts you create in lab/test/development environments to avoid catastrophic data loss.
It is a good idea to perform a full data backup or take a snapshot prior to performing potentially destructive operations.</description>
    </item>
    
    <item>
      <title>Resize Azure Virtual Machine Disks with Azure PowerShell</title>
      <link>https://www.craigforrester.com/posts/resize-azure-vm-disks-with-azure-powershell/</link>
      <pubDate>Wed, 01 Aug 2018 16:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/resize-azure-vm-disks-with-azure-powershell/</guid>
      <description>In this post, I&amp;rsquo;m going to walk through how to expand a managed OS disk on an Azure virtual machine with PowerShell. In the previous post in this series, we covered how to achieve this with Azure CLI in Bash, and in later posts, we will cover how to convert these commands into scripts.
Log In and Verify Subscription Before we do anything, as always, we want to be certain we have PowerShell connected to Azure Resource Manager, and that we are on the correct subscription.</description>
    </item>
    
    <item>
      <title>Convert Times Between Time Zones with PowerShell</title>
      <link>https://www.craigforrester.com/posts/convert-times-between-time-zones-with-powershell/</link>
      <pubDate>Wed, 25 Apr 2018 17:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/convert-times-between-time-zones-with-powershell/</guid>
      <description>Convert Time for different World Time Zone If you work in a multinational organization like me or you have loved ones or friends who live in other parts of the country or world, then you have, no doubt, found yourself needing to convert time from one time zone to another. In this post, I&amp;rsquo;m going to show you how to do this really easily in PowerShell.
TL;DR In a hurry?</description>
    </item>
    
    <item>
      <title>Display Dates and Times with PowerShell</title>
      <link>https://www.craigforrester.com/posts/display-dates-and-times-with-powershell/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/display-dates-and-times-with-powershell/</guid>
      <description>In the course of any given week, I find myself having to determine dates and times for future and past days, weeks, months &amp;mdash; even years. PowerShell makes this extremely easy. In thise post, we&amp;rsquo;ll discuss how&amp;hellip;
Getting Dates and Times with PowerShell First let&amp;rsquo;s show how to get the current local time:
Get-Date  You can display a different date and time by specifying it after Get-Date (as an unnamed parameter):</description>
    </item>
    
    <item>
      <title>Scripting Notebook: Create a File of a Specific Size</title>
      <link>https://www.craigforrester.com/posts/scripting-notebook-create-a-file-of-a-specific-size/</link>
      <pubDate>Thu, 01 Mar 2018 18:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/scripting-notebook-create-a-file-of-a-specific-size/</guid>
      <description>This is the first post in a series I&amp;rsquo;m calling &amp;ldquo;Scripting Notebook,&amp;rdquo; in which I will explore ways of accomplishing various scripting tasks across several languages: Bash, CMD, PowerShell, and Python.
Creating a File of Arbitrary Size Sometimes when you&amp;rsquo;re testing, for whatever reason, you need one or more files that are a particular size. You don&amp;rsquo;t care what they are, you just need some data to take up disk space, transfer over the network, etc.</description>
    </item>
    
    <item>
      <title>Interactive PowerShell, Part 5: Object Properties</title>
      <link>https://www.craigforrester.com/posts/interactive-powershell-part-5-object-properties/</link>
      <pubDate>Wed, 28 Feb 2018 18:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/interactive-powershell-part-5-object-properties/</guid>
      <description>In my previous post in this series, I talked about how PowerShell&amp;rsquo;s use of objects distinguishes it from other shells and what that means for how we use it. In this post, I&amp;rsquo;ll talk more about objects and their properties.
Properties We&amp;rsquo;ve already talked a bit about PowerShell object properties, and said that properties are like the options on a particular model of a car: a car can be red, have leather interior, a navigation system, etc.</description>
    </item>
    
    <item>
      <title>Interactive PowerShell, Part 4: Objects</title>
      <link>https://www.craigforrester.com/posts/interactive-powershell-part-4-objects/</link>
      <pubDate>Fri, 23 Feb 2018 18:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/interactive-powershell-part-4-objects/</guid>
      <description>In my previous post in this series, I discussed how to set up your PowerShell profile so that you could start collecting shortcuts and tools into it that will make working with PowerShell interactively much, much easier. In this post, I&amp;rsquo;d like to take a step back and talk about what distinguishes PowerShell from other shells and what that means for how we use it. This leads to a good question:</description>
    </item>
    
    <item>
      <title>Interactive PowerShell, Part 3: Profiles</title>
      <link>https://www.craigforrester.com/posts/interactive-powershell-part-3-profiles/</link>
      <pubDate>Fri, 16 Feb 2018 19:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/interactive-powershell-part-3-profiles/</guid>
      <description>Profiles One of the first things I do when working interactively on a Linux system is customize a few key configuration files, one of which is .bash_aliases, so that I can work more comfortably and efficiently at the command line.
PowerShell has its own equivalent of .bashrc in which you can create your own functions, aliases, and shortcuts to make working with PowerShell as an interactive shell much easier. It&amp;rsquo;s known as a profile.</description>
    </item>
    
    <item>
      <title>List Running Desktop Applications with PowerShell</title>
      <link>https://www.craigforrester.com/posts/powershell-list-running-desktop-apps/</link>
      <pubDate>Thu, 15 Feb 2018 19:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/powershell-list-running-desktop-apps/</guid>
      <description>Here&amp;rsquo;s a quick PowerShell tip&amp;hellip;
TL;DR Have you ever wanted to get a list of running desktop applications in PowerShell? Maybe you want to see what you have open but would rather not fumble around with Task Manager?
Here&amp;rsquo;s a one-liner to do just that:
gps | ? { $_.MainWindowTitle }  Sample output:
Handles NPM(K) PM(K) WS(K) CPU(s) Id SI ProcessName ------- ------ ----- ----- ------ -- -- ----------- 4269 188 382940 424100 1,336.</description>
    </item>
    
    <item>
      <title>Interactive PowerShell, Part 2: Aliases</title>
      <link>https://www.craigforrester.com/posts/interactive-powershell-part-2-aliases/</link>
      <pubDate>Wed, 14 Feb 2018 20:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/interactive-powershell-part-2-aliases/</guid>
      <description>Getting Comfortable One of the first complaints you may have against PowerShell is how much typing you have to do if you&amp;rsquo;re going to use it interactively.
Take the cmdlet used to output IP addresses on a Windows 10 system:
Get-NetIPAddress  That&amp;rsquo;s 16 characters long, as compared with the 7 character ipconfig we all know and love. It&amp;rsquo;s even longer if you want to make the output readable in the shell:</description>
    </item>
    
    <item>
      <title>Interactive PowerShell, Part 1: The Hidden Shell</title>
      <link>https://www.craigforrester.com/posts/interactive-powershell-part-1/</link>
      <pubDate>Tue, 13 Feb 2018 20:00:00 -0500</pubDate>
      
      <guid>https://www.craigforrester.com/posts/interactive-powershell-part-1/</guid>
      <description>A Shell? What&amp;rsquo;s That? Most of us that know PowerShell know it as an automation tool &amp;mdash; as a way to get remote systems to do things in repeatable ways.
But for as many of us that know the scripting-side of PowerShell, I venture that far fewer know and use PowerShell as an interactive shell. Sure, we may occasionally use it as Command Prompt replacement, but are we truly harnessing the full capacity of PowerShell as a shell?</description>
    </item>
    
  </channel>
</rss>