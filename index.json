[{"content":"Craig Forrester is a Lead Senior Engineer specializing in Cloud Infrastructure, AI Operations, and DevOps workflows. He likes his coffee black, his text editor modal, and his key switches brown. Just like AI, Craig makes mistakes, so always do additional research and test everything in a lab or sandbox environment.\n","permalink":"https://www.craigforrester.com/about/","summary":"\u003cp\u003eCraig Forrester is a Lead Senior Engineer specializing in Cloud Infrastructure, AI Operations, and DevOps workflows.  He likes his coffee black, his text editor modal, and his key switches brown.  Just like AI, Craig makes mistakes, so always do additional research and test everything in a lab or sandbox environment.\u003c/p\u003e","title":"About"},{"content":"Convert Time for different World Time Zone Last Revision: 2025-07-12 If you work in a multinational organization like me or you have loved ones or friends who live in other parts of the country or world, then you have, no doubt, found yourself needing to convert time from one time zone to another. In this post, I\u0026rsquo;m going to show you how to do this really easily in PowerShell.\nTL;DR In a hurry? Here\u0026rsquo;s how to convert the current date and time from the local time zone to another one:\n# Convert the Local Date and Time to Greenwich Standard [System.TimeZoneInfo]::ConvertTimeBySystemTimeZoneId( ` (Get-Date), \u0026#39;Greenwich Standard Time\u0026#39;) Where we have \u0026lsquo;Greenwich Standard Time\u0026rsquo; here, you can put any time zone you wish and get the current time in that time zone (Note, too, that I have used the backtick (`) to split this into two lines in order to make it easier to read, which you do not have to do).\nWe are essentially providing two date and time objects \u0026mdash; one to convert from, the other to convert to:\n# $convert_from and $to here must be PowerShell DateTime objects [System.TimeZoneInfo]::ConvertTimeBySystemTimeZoneId( $convert_from , $to ) Picking a Date and Time Breaking it down, you first want to get the time to convert from, using the Get-Date command. We\u0026rsquo;ll call this the \u0026ldquo;input time\u0026rdquo; from now on.\nGet-Date What if you want to use a different time then the current time though? Well, the solution is as simple as giving Get-Date the time you want to use:\nGet-Date \u0026#34;2018-12-25 00:00\u0026#34; Choosing a Time Zone Next, you want to determine the name of the time zone you are converting that input time to. In my first example, I used \u0026ldquo;Greenwich Standard Time\u0026rdquo;, but what about other time zones? And how did I know that \u0026ldquo;Greenwich Standard Time\u0026rdquo; was a valid time zone anyway?\nTo list valid time zones, we can access the .Net TimeZoneInfo Class, as follows:\n[System.TimeZoneInfo]::GetSystemTimeZones( ) This will output a list of time zones as objects. Here is an example:\nId : India Standard Time\rDisplayName : (UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi\rStandardName : India Standard Time\rDaylightName : India Daylight Time\rBaseUtcOffset : 05:30:00\rSupportsDaylightSavingTime : False Using this information, we can convert from the input time to whatever time zone we choose by using TimeZoneInfo.ConvertTimeBySystemTimeZoneId Method:\n[System.TimeZoneInfo]::ConvertTimeBySystemTimeZoneId( ` (Get-Date), \u0026#39;India Standard Time\u0026#39;) # # Example Output: # # Tuesday, April 25, 2018 4:30:00 AM ConvertTimeBySystemTimeZoneId uses the local system\u0026rsquo;s time zone to determine the input time zone, since the output object of Get-Date does not have the Kind property and the default is Unspecified. So, if we want to convert from a time zone different from the one our system is in, we need to do a bit more work\u0026hellip;\nConverting Between Two Different Time Zones First, we need time zone information for both the source and destination. We\u0026rsquo;ll assign both of these to variable that we can use later:\n# Assign India time zone info to a variable $intz = [System.TimeZoneInfo]::GetSystemTimeZones() | Where-Object { $_.Id -match \u0026#34;India Standard\u0026#34; } # Assign Eastern Australia time zone info to a variable $autz = [System.TimeZoneInfo]::GetSystemTimeZones() | Where-Object { $_.Id -match \u0026#34;AUS Eastern\u0026#34; } Next we need the date and time we would like to convert. We will use a string here, because we will be specifying the input time zone using the variables we just created:\n# This will work $time_to_convert = \u0026#34;2018-12-25 00:00\u0026#34; # This will also work $time_to_convert = ((Get-Date).ToString(\u0026#39;yyyy-MM-ddTHH:mm:ss\u0026#39;)) # This will NOT work, because the string contains the local time zone $time_to_convert = ((Get-Date).ToString(\u0026#39;yyyy-MM-ddTHH:mm:ssz\u0026#39;)) # ^ # Note the `z` here tells the ToString method to include the # system\u0026#39;s time zone offset, which will confuse ConvertTime() # See the example, below... Once we have an input time, input time zone, and output time zone, all that remains is to piece them all together in a call to ConvertTime():\n[System.TimeZoneInfo]::ConvertTime( ` \u0026#34;2018-12-25 00:00\u0026#34;, $intz, $autz) # Output: # # Tuesday, December 25, 2018 5:30:00 AM # Remember earlier when we said adding z to the ToString formatting wouldn\u0026rsquo;t work? Here\u0026rsquo;s the error you will get if you do:\n# This will NOT work, because the string contains the local time zone $time_to_convert = \u0026#39;2018-12-25T00:00:00-4\u0026#39; [System.TimeZoneInfo]::ConvertTime($time_to_convert, $intz, $autz) # # Output: # # Exception calling \u0026#34;ConvertTime\u0026#34; with \u0026#34;3\u0026#34; argument(s): \u0026#34;The conversion could not be completed because the supplied DateTime did not have the Kind property set correctly. # For example, when the Kind property is DateTimeKind.Local, the source time zone must be TimeZoneInfo.Local. # Parameter name: sourceTimeZone\u0026#34; # At line:1 char:1 # + [System.TimeZoneInfo]::ConvertTime( ` # + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # + CategoryInfo : NotSpecified: (:) [], MethodInvocationException # + FullyQualifiedErrorId : ArgumentException # # Here\u0026#39;s the working example: $time_to_convert = \u0026#39;2018-12-25T00:00:00\u0026#39; [System.TimeZoneInfo]::ConvertTime($time_to_convert, $intz, $autz) # # Output: # # Tuesday, December 25, 2018 5:30:00 AM In the next post, we\u0026rsquo;ll cover how to put all this together into a time zone converter that we can use to easily convert dates and times whenever we have the need.\nAdditional Reading Documentation: TimeZoneInfo Class Documentation: TimeZoneInfo.ConvertTimeBySystemTimeZoneId Method Documentation: DateTime.Kind Property ","permalink":"https://www.craigforrester.com/posts/convert-times-between-time-zones-with-powershell/","summary":"\u003ch2 id=\"convert-time-for-different-world-time-zone\"\u003eConvert Time for different World Time Zone\u003c/h2\u003e\n\n            \u003clink rel=\"stylesheet\" href=\"/css/vendors/admonitions.4fd9a0b8ec8899f2ca952048d255a569f433f77dfb3f52f5bc87e7d65cdce449.css\" integrity=\"sha256-T9mguOyImfLKlSBI0lWlafQz9337P1L1vIfn1lzc5Ek=\" crossorigin=\"anonymous\"\u003e\n    \u003cdiv class=\"admonition note\"\u003e\n      \u003cdiv class=\"admonition-header\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"\u003e\u003cpath d=\"M0 64C0 28.7 28.7 0 64 0L224 0l0 128c0 17.7 14.3 32 32 32l128 0 0 125.7-86.8 86.8c-10.3 10.3-17.5 23.1-21 37.2l-18.7 74.9c-2.3 9.2-1.8 18.8 1.3 27.5L64 512c-35.3 0-64-28.7-64-64L0 64zm384 64l-128 0L256 0 384 128zM549.8 235.7l14.4 14.4c15.6 15.6 15.6 40.9 0 56.6l-29.4 29.4-71-71 29.4-29.4c15.6-15.6 40.9-15.6 56.6 0zM311.9 417L441.1 287.8l71 71L382.9 487.9c-4.1 4.1-9.2 7-14.9 8.4l-60.1 15c-5.5 1.4-11.2-.2-15.2-4.2s-5.6-9.7-4.2-15.2l15-60.1c1.4-5.6 4.3-10.8 8.4-14.9z\"/\u003e\u003c/svg\u003e\n        \u003cspan\u003eLast Revision: 2025-07-12\u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\u003cp\u003eIf you work in a multinational organization like me or you have loved ones or friends who live in other parts of the country or world, then you have, no doubt, found yourself needing to convert time from one time zone to another.  In this post, I\u0026rsquo;m going to show you how to do this really easily in PowerShell.\u003c/p\u003e","title":"Convert Times Between Time Zones with PowerShell"},{"content":" Last Revision: 2025-07-12 In the course of any given week, I find myself having to determine dates and times for future and past days, weeks, months \u0026mdash; even years. PowerShell makes this extremely easy. In thise post, we\u0026rsquo;ll discuss how\u0026hellip;\nGetting Dates and Times with PowerShell First let\u0026rsquo;s show how to get the current local time:\nGet-Date You can display a different date and time by specifying it after Get-Date (as an unnamed parameter):\nGet-Date \u0026#34;December 21, 2012\u0026#34; You can specify this in other formats as well:\nGet-Date \u0026#34;2012-12-21\u0026#34; Or, using only part of a whole date and time:\n# When is Christmas this year? Get-Date \u0026#34;December 25\u0026#34; You can even specify it relative to the current date and time:\n# What is the date a week from today? (Get-Date).AddDays(7) Notice there that I had to wrap Get-Date in parentheses () in order to use the AddDays. By wrapping a command in parens, we can access its output object properties and methods interactively.\nThere are other methods we can use as well. To find out what they are, we can either use tab completion\u0026hellip;\n(Get-Date).|\r^ Press \u0026lt;TAB\u0026gt; multiple times to cycle through possibilities Or, more directly, we can just look at the methods Get-Date lets us use:\nGet-Date | Get-Member -MemberType Method Here is an excerpt of the output:\nTypeName: System.DateTime\rName MemberType Definition\r---- ---------- ----------\rAdd Method datetime Add(timespan value)\rAddDays Method datetime AddDays(double value)\rAddHours Method datetime AddHours(double value)\rAddMilliseconds Method datetime AddMilliseconds(double value)\rAddMinutes Method datetime AddMinutes(double value)\rAddMonths Method datetime AddMonths(int months)\rAddSeconds Method datetime AddSeconds(double value)\rAddTicks Method datetime AddTicks(long value)\rAddYears Method datetime AddYears(int value) Now, if you\u0026rsquo;re paying attention, you\u0026rsquo;ll notice that there are no subtraction methods \u0026mdash; such as .SubtractDays(), for example. How, then, do we get the date one week ago or the day 90 days from today? We simply use negative numbers:\n# What is the date one week ago? (Get-Date).AddDays(-7) # What day was it 90 days ago? (Get-Date).AddDays(-90) I hope you find that helpful. In my next PowerShell tip, I\u0026rsquo;ll show how to convert dates and times between time zones.\nAdditional Reading Documentation: Get-Date ","permalink":"https://www.craigforrester.com/posts/display-dates-and-times-with-powershell/","summary":"\u003cdiv class=\"admonition note\"\u003e\n      \u003cdiv class=\"admonition-header\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"\u003e\u003cpath d=\"M0 64C0 28.7 28.7 0 64 0L224 0l0 128c0 17.7 14.3 32 32 32l128 0 0 125.7-86.8 86.8c-10.3 10.3-17.5 23.1-21 37.2l-18.7 74.9c-2.3 9.2-1.8 18.8 1.3 27.5L64 512c-35.3 0-64-28.7-64-64L0 64zm384 64l-128 0L256 0 384 128zM549.8 235.7l14.4 14.4c15.6 15.6 15.6 40.9 0 56.6l-29.4 29.4-71-71 29.4-29.4c15.6-15.6 40.9-15.6 56.6 0zM311.9 417L441.1 287.8l71 71L382.9 487.9c-4.1 4.1-9.2 7-14.9 8.4l-60.1 15c-5.5 1.4-11.2-.2-15.2-4.2s-5.6-9.7-4.2-15.2l15-60.1c1.4-5.6 4.3-10.8 8.4-14.9z\"/\u003e\u003c/svg\u003e\n        \u003cspan\u003eLast Revision: 2025-07-12\u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\u003cp\u003eIn the course of any given week, I find myself having to determine dates and times for future and past days, weeks, months \u0026mdash; even years.  PowerShell makes this extremely easy. In thise post, we\u0026rsquo;ll discuss how\u0026hellip;\u003c/p\u003e","title":"Display Dates and Times with PowerShell"}]